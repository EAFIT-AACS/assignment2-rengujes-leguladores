from tabulate import tabulate
import Algoritmo1  # Import Algorith1.py to read generated strings

class PDA:
    def __init__(self):
        self.starting_pile_symbol = "S"
        self.starting_state = "q0"

    def transitions(self, stack, current_state, char):
        if len(stack) != 0:
            if current_state == "q0" and char == "" and stack[-1] == "S":
                stack.pop()
                return 1, current_state
            elif current_state == "q0" and char == "a" and stack[-1] == "S":
                stack.pop()
                stack.append("a")
                return 2, current_state
            elif current_state == "q0" and char == "a" and stack[-1] == "a":
                stack.append("a")
                return 3, current_state
            elif current_state == "q0" and char == "b" and stack[-1] == "a":
                stack.pop()
                current_state = "q1"
                return 4, current_state
            elif current_state == "q1" and char == "b" and stack[-1] == "a":
                stack.pop()
                return 5, current_state
            else:
                return -1, current_state
        else:
            return -1, current_state

    def is_valid(self, string):
        stack = [self.starting_pile_symbol]
        if len(string) == 0:
            return True, [1]

        transitions_done = []
        current_state = self.starting_state

        for char in string:
            transition, current_state = self.transitions(stack, current_state, char)
            if transition == -1:
                transitions_done.append(transition)
                return False, transitions_done
            transitions_done.append(transition)

        return len(stack) == 0, transitions_done


# 📊 Process strings with PDA
pda = PDA()
results = []

# 📌 Use strings generated by Algoritmo1.py
generated_strings = Algoritmo1.string_set  

for string in generated_strings:
    accepted, _ = pda.is_valid(string)
    checkmark = "✅" if accepted else "❌"
    results.append((string, checkmark))

# 🔥 Show results
print("\n📌 Results :")
for idx, (s, result) in enumerate(results, 1):
    print(f"{idx}. {s} {result}")
